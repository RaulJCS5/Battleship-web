package pt.isel.daw.battleship.domain

import org.springframework.stereotype.Component
import pt.isel.daw.battleship.domain.fleet.*
import java.sql.Timestamp
import java.time.Instant

@Component
class GameLogic {
    fun createNewGame(
        playerOne: User,
        playerTwo: User,
        maxShootsRule: Int,
        maxTimePerRound: Int,
    ): Game {
        return Game(
            id = null, //id generated by database
            phase = Game.Phase.LAYOUT.phase,
            boardPlayerOne = Board.create(),
            boardPlayerTwo = Board.create(),
            startDate = Timestamp.from(Instant.now()),
            updateDate = null,
            playerOne = playerOne,
            playerTwo = playerTwo,
            maxShootsRule = maxShootsRule,
            roundDeadline = Timestamp.from(Instant.now().plusSeconds(maxTimePerRound.toLong())),
            roundNumber = 0,
            shootsPerRoundCount = 0,
            activeRoundUser = playerOne,
            maxTimePerRound = maxTimePerRound,
        )
    }

    // check if layout is ready and start game
    fun ifLayoutReadyStartGame(game: Game): Boolean {
        return if (!game.boardPlayerOne.boardIsEmpty() && !game.boardPlayerTwo.boardIsEmpty() && game.roundNumber == 0) {
            game.phase = Game.Phase.SHOOTING_PLAYER_ONE.phase
            game.roundNumber++
            true
        } else game.roundNumber > 0
    }

    // set fleet to @player board
    // return false if invalid fleet
    fun setShipsToBoard(game: Game, player: User, fleet: Fleet): Boolean {
        return when (player) {
            game.playerOne -> {
                game.boardPlayerOne.checkAndSetFleet(fleet)
            }

            game.playerTwo -> {
                game.boardPlayerTwo.checkAndSetFleet(fleet)
            }

            else -> false
        }
    }

    // shoot opponent board
    fun doShoot(game: Game, activePlayer: User, pos: Position): Boolean {
        var result = false
        if (activePlayer == game.playerOne) {
            if (game.phase == Game.Phase.SHOOTING_PLAYER_ONE.phase) {
                if (!game.boardPlayerTwo.alreadyShootPosition(pos)) {
                    game.boardPlayerTwo.doShoot(pos)
                    game.shootsPerRoundCount++
                    result = true
                }
            }
        } else if (activePlayer == game.playerTwo) {
            if (game.phase == Game.Phase.SHOOTING_PLAYER_TWO.phase) {
                if (!game.boardPlayerOne.alreadyShootPosition(pos)) {
                    game.boardPlayerOne.doShoot(pos)
                    game.shootsPerRoundCount++
                    result = true
                }
            }
        }
        return result
    }

    // set active round user
    fun setNextRoundUser(game: Game): Boolean {
        var result = false
        val winner = weHaveWinner(game)
        val roundEnd = roundEnd(game)

        if (game.phase != Game.Phase.LAYOUT.phase &&
            game.phase != Game.Phase.PLAYER_ONE_WON.phase &&
            game.phase != Game.Phase.PLAYER_TWO_WON.phase && !winner && roundEnd
        ) {
            if (game.activeRoundUser == game.playerOne) {
                game.activeRoundUser = game.playerTwo
                game.phase = Game.Phase.SHOOTING_PLAYER_TWO.phase
            } else {
                game.activeRoundUser = game.playerOne
                game.phase = Game.Phase.SHOOTING_PLAYER_ONE.phase
            }
            setRoundDeadline(game)
            game.shootsPerRoundCount = 0
            game.roundNumber++
            result = true
        }
        return result
    }

    // check if round end @numberShots: shots of current turn
    private fun roundEnd(game: Game): Boolean {
        val ts: Timestamp = Timestamp.from(Instant.now())
        return game.shootsPerRoundCount >= game.maxShootsRule || ts.after(game.roundDeadline)
    }

    // set timeout to current / next round
    private fun setRoundDeadline(game: Game) {
        game.roundDeadline = Timestamp.from(Instant.now().plusSeconds(game.maxTimePerRound.toLong()))
    }

    // if all opponent fleet is sunk, player win
    fun weHaveWinner(game: Game): Boolean {
        var result = false

        if (game.phase == Game.Phase.PLAYER_ONE_WON.phase || game.phase == Game.Phase.PLAYER_TWO_WON.phase) {
            result = true
        } else {
            if (game.boardPlayerTwo.allShipsSunk()) {
                game.phase = Game.Phase.PLAYER_ONE_WON.phase
                result = true
            } else if (game.boardPlayerOne.allShipsSunk()) {
                game.phase = Game.Phase.PLAYER_TWO_WON.phase
                result = true
            }
        }
        return result
    }
}